import{h as u}from"./chunk-AV73RGVI.js";import{g as a,h as n,l as s,r as l,t as i,y as c}from"./chunk-U6U25BWF.js";var t=class t{static obtenerTextoDelError(r){let e={required:"Este campo es requerido",minlength:`M\xEDnimo de ${r.minlength?.requiredLength} caracteres.`,min:`Valor m\xEDnimo de ${r.min?.min}`,email:"El valor ingresado no es un correo electr\xF3nico",emailTomado:"El correo electr\xF3nico ya est\xE1 siendo usado por otro usuario",pattern:()=>this.obtenerMensajePatron(r.pattern)};for(let o of Object.keys(r))return o in e?o==="pattern"?e[o]():e[o]:`Error de validaci\xF3n no controlado ${o}`;return null}static esCampoInvalido(r,e){return!!r.controls[e].errors&&r.controls[e].touched}static obtenerErrorDelCampo(r,e){if(!r.controls[e])return null;let o=r.controls[e].errors??{};return t.obtenerTextoDelError(o)}static sonCamposIguales(r,e){return o=>{let m=o.get(r)?.value,d=o.get(e)?.value;return m===d?null:{camposNoIguales:!0}}}static validarRespuestaServidor(r){let e=r.value;return!e||e.trim()===""?n(null):l(400).pipe(c(()=>a(u(e.trim())).pipe(s(o=>o?null:{emailTomado:!0}),i(o=>(console.error("Error al validar email:",o),n(null))))))}static obtenerMensajePatron(r){switch(r.requiredPattern){case t.patronNombre:return"El nombre debe contener al menos un nombre y un apellido";case t.patronEmail:return"El correo electr\xF3nico no es v\xE1lido";case t.patronSoloAlfanumerico:return"El campo solo puede contener letras y n\xFAmeros";case t.patronSoloNumeros:return"El campo solo puede contener n\xFAmeros";case t.patronContrasena:return"La contrase\xF1a debe contener al menos una may\xFAscula, un n\xFAmero y un car\xE1cter especial (@$!.%*?&)";default:return"El valor ingresado no es v\xE1lido"}}};t.patronNombre=new RegExp("^\\p{L}+(?:\\s+\\p{L}+)+$","u"),t.patronEmail="^[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,4}$",t.patronSoloAlfanumerico="^[a-zA-Z0-9]+$",t.patronSoloNumeros="^[0-9]+$",t.patronCelular="^3[0-9]{9}$",t.patronContrasena="^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&.])[A-Za-z\\d@$!#-_%*?&.]+$";var p=t;export{p as a};
